name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Email Privacy Check
  privacy-check:
    name: Privacy & Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for email check
    
    - name: Check for private emails in commits
      run: |
        echo "üîç Checking commit emails for privacy compliance..."
        
        # Get all commit emails in this PR/push
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, check commits between base and head
          COMMITS=$(git log --format="%ae" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        else
          # For pushes, check the last commit
          COMMITS=$(git log --format="%ae" -1)
        fi
        
        echo "Commit emails found:"
        echo "$COMMITS"
        
        # Check if any emails are not using GitHub no-reply format
        PRIVATE_EMAIL_VIOLATIONS=$(echo "$COMMITS" | grep -v "@users.noreply.github.com" || true)
        
        if [ ! -z "$PRIVATE_EMAIL_VIOLATIONS" ]; then
          echo "‚ùå PRIVACY VIOLATION: Personal email addresses detected in commits:"
          echo "$PRIVATE_EMAIL_VIOLATIONS"
          echo ""
          echo "üìß Please configure git to use GitHub no-reply email:"
          echo "git config user.email \"yourusername@users.noreply.github.com\""
          echo ""
          echo "üîí Enable privacy at: https://github.com/settings/emails"
          echo "‚úÖ Check 'Keep my email addresses private'"
          echo "‚úÖ Check 'Block command line pushes that expose my email'"
          exit 1
        else
          echo "‚úÖ All commits use private email addresses"
        fi

  # Backend Python Tests
  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    needs: privacy-check
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: uv sync
    
    - name: Run linting with ruff
      run: uv run ruff check .
    
    - name: Run formatting check with black
      run: uv run black . --check
    
    - name: Run type checking with mypy
      run: uv run mypy . --ignore-missing-imports
    
    - name: Run tests with pytest
      run: uv run pytest --cov=. --cov-report=xml --cov-report=term
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        token: ${{ secrets.CODECOV_TOKEN }}

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest
    needs: privacy-check
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run Prettier check
      run: npm run format:check
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        token: ${{ secrets.CODECOV_TOKEN }}

  # Build & Test Integration
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    # Backend setup
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: uv sync
    
    # Frontend setup  
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        uv run python main.py &
        sleep 10
      env:
        ENVIRONMENT: test
    
    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:e2e
      continue-on-error: true  # Allow this to fail until e2e tests are implemented

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: privacy-check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your deployment commands here
        # Example: docker build, push to registry, deploy to cloud
    
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        # Add smoke test commands
    
    - name: Deploy to production
      run: |
        echo "üåü Deploying to production environment..."
        # Add production deployment commands
    
    - name: Notify deployment success
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üìä View deployment: https://your-production-url.com"